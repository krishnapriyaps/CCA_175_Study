case class Product (productID : Int,productCode : String,name : String,quantity : Int,price: Double)

val DataRDD =  sc.textFile("hdfs://quickstart.cloudera:8020/user/cloudera/revist_feb23/data.txt")


val ProductRDD = DataRDD.map(_.split(',')).map(a => Product(a(0).trim.toInt, a(1), a(2), a(3).trim.toInt, a(4).trim.toDouble))

val sqlCt =  new org.apache.spark.sql.hive.HiveContext(sc)

val prodDF  = sqlCt.createDataFrame(ProductRDD)

prodDF.registerTempTable("prod23feb")

sqlCt .sql("create table product_23feb_orc (productID int,productCode String,name String,quantity  Int,price Double ) stored as ORC")
sqlCt .sql("create table product_23feb_parq (productID int,productCode String,name String,quantity  Int,price Float ) stored as PARQUET")

sqlCt .sql("insert into product_23feb_orc select * from prod23feb")
sqlCt .sql("insert into product_23feb_parq select * from prod23feb")

sqlCt .sql("select * from product_23feb_orc").show

sqlCt .sql("select * from product_23feb_parq")

1. Select all the products which has product code as null
sqlCt .sql("select * from prod23feb where productCode is null").show

2. Select all the products, whose name starts with Pen and results should be order by Price
descending order.

sqlCt .sql("select * from prod23feb ").show
sqlCt .sql("select * from prod23feb where name like ('Pen%') order by price desc").show

3. Select all the products, whose name starts with Pen and results should be order by
Price descending order and quantity

sqlCt .sql("select * from prod23feb where name like (\"%en%\") order by price desc , quantity ").show

4. Select top 2 products by price

sqlCt .sql("select * from prod23feb where name like ('Pen%') order by price desc  limit 2").show

