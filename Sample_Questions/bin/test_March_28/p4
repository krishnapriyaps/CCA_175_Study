

val ordersRDD =  sc.textFile("hdfs://quickstart.cloudera:8020/user/cloudera/test_match_28/p92_orders/*").map(r => (r.split('|')(0), r))

val orderItemsRDD =  sc.textFile("hdfs://quickstart.cloudera:8020/user/cloudera/test_match_28/p92_order_items/*").map(r => (r.split('|')(1), r))

// Joing

val joinRDD = ordersRDD.join(orderItemsRDD)

// Total reveue per (day per order)
val totalRevenuePerDayPerOrder = joinRDD.map(r => (r._1+","+r._2._1.split('|')(1), r._2._2.split('|')(4).trim.toDouble) ).reduceByKey((v1,v2) => v1+v2)



//Totoal revenud for each day aggregate by key

val initialval = 0.0

val func1 = (each : Double, value: Double) => each + value

val func2 = (each1:Double, each2:Double) => each1+each2

val totalRevenuePerDay = joinRDD.map(r => (r._2._1.split('|')(1),r._2._2.split('|')(4).trim.toDouble)).aggregateByKey(initialval)(func1,func2)



//Avegrare revenue for each date


val createComb = (value : Double) => (1, value)
val func1 = ( collector : (Int,Double), value:Double ) => (collector._1+1, collector._2+value)

val func2 = ( collector : (Int,Double),  collector2 : (Int,Double)) => (collector._1+collector2._1, collector._2+collector2._2)


val avgRevenuePerDay = joinRDD.map(r => (r._2._1.split('|')(1),r._2._2.split('|')(4).trim.toDouble)).combineByKey(createComb,func1,func2).mapValues( r => r._2/r._1)


avgRevenuePerDay.map(r => (r._2, r._1)).sortByKey().map(r => r._2+ ","+ r._1).saveAsTextFile("hdfs://quickstart.cloudera:8020/user/cloudera/test_match_28/sortedRevenue")






