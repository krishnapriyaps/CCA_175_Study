val keysWithValuesList = Array ("foo=A","foo=A","foo=A","foo=A","foo=B","bas=C","bas=D","bas=D")
val data = sc.parallelize(keysWithValuesList)
// Create Key value pair
val kv = data.map(_.split("=")).map(v => (v(0), v(1))).cache()
val initialCount=0;


val addToCounts = (c : Int, v:String) => c +1
val SumPartialCounts = (n1:Int, n2:Int) => n1+n2

val countByKey=kv.aggregateByKey(initialCount)(addToCounts,SumPartialCounts)

Now Define two functions (addToCounts, sumPartitionCounts)such which will produce following resutls:
Output1: 
countByKey.collect
res3: Array[(String, int)] = Array ((foo,5),bar,3)

import scala.collection._
val initialSet =  scala.collection.mutable.HashSet.empty[String]
val addToSet = (s : scala.collection.mutable.HashSet[String], v:String) => s+v
val mergePartitionSets = (s1 : scala.collection.mutable.HashSet[String], s2 : scala.collection.mutable.HashSet[String]) => s1 ++= s2
val uniqueByKey = kv.aggregateByKey(initialSet)(addToSet, mergePartitionSets)

Now define two functions (addToSet, mergePartitionSets) such which will produce following results

Output2:
uniqueByKey.collect
res4: Array[(String, scala.collection.mutable.HashSet[String])] =  Array((foo, Set(A,B)), bar, Set(C,D))
